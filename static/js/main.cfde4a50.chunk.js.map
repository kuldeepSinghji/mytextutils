{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/Textform.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","useState","mode","setMode","btnmode","setBtnmode","className","title","onClick","onchange","defaultProps","about","Alert","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","type","msg","Textform","text","setText","style","heading","name","id","onChange","e","target","value","cols","rows","disabled","length","newText","showAlert","navigator","clipboard","writeText","split","join","filter","element","Footer","App","setAlert","message","setTimeout","color","backgroundColor","document","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cfde4a50.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport \"./Navbar.css\"\r\nfunction Navbar(props) {\r\n    const [mode, setMode] = useState(\"light\")\r\n    const [btnmode, setBtnmode] = useState(\"Dark Mode\")\r\n    const toggleMode= ()=>{\r\n        if(mode === \"light\"){\r\n        setMode(\"dark\")\r\n        setBtnmode(\"Light Mode\")\r\n        }\r\n        else{\r\n            setMode(\"light\")\r\n            setBtnmode(\"Dark Mode\")\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <div  className={`navContainer ${mode}`}>\r\n            <nav className=\"navbar\">\r\n                <li>{props.title}</li>\r\n            </nav>\r\n            <div className=\"calender-footer\">\r\n                <div className=\"toggle\">\r\n                    <span>{btnmode}</span>\r\n                </div>\r\n                <div onClick={props.onchange}>\r\n                <div onClick={toggleMode}className=\"dark-mode-switch\">\r\n                    <div  className=\"dark-mode-switch-ident\">\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,\r\n                    about:PropTypes.string.isRequired};\r\nNavbar.defaultProps = {title:\"Set title here\",\r\n                    about:\"set about there\"}\r\nexport default Navbar\r\n","import React from 'react'\r\nimport \"./Alert.css\"\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&<> \r\n       <div className=\"alertContainer\">\r\n            <p>{capitalize(props.alert.type)} : {props.alert.msg}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\nimport Alert from './Alert';\r\nimport \"./Textform.css\"\r\nexport default function Textform(props) {\r\n    const [text, setText] = useState(\"\")\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase...\",\"Sucess\")\r\n    }\r\n    const handleLoCase = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase...\",\"sucess\")\r\n    }\r\n    const clearText = ()=>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Clear all the text..\",\"sucess\")\r\n    }\r\n    const handleCopy = ()=>{\r\n        navigator.clipboard.writeText(text)\r\n        props.showAlert(\"Text has been copied..\",\"sucess\")\r\n    }\r\n    const removeExtraSpaces = ()=>{\r\n        let newText = text.split(/\\s+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Remove All the Extra Spaces....\",\"sucess\")\r\n    }\r\n    const handleOnChange = (e)=>{\r\n        setText(e.target.value)\r\n    }\r\n    return(\r\n        <>\r\n        <div style={props.mode} className=\"textformAlert\">\r\n        <Alert alert={props.alert}/>\r\n        </div>\r\n        <div className=\"textformContainer\" style={props.mode}>\r\n        <div className=\"textformInline\">\r\n            <h1 className=\"textformHeading\">{props.heading}</h1>\r\n            <textarea name=\"textarea\" id=\"textarea\" onChange={handleOnChange} value={text} cols=\"30\" rows=\"10\"></textarea>\r\n            <div className=\"textformButtons\">\r\n            <button disabled={text.length === 0} onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button disabled={text.length === 0} onClick={handleLoCase}>Convert to LowerCase</button>\r\n            <button disabled={text.length === 0} onClick={clearText}>Clear Text</button>\r\n            <button disabled={text.length === 0} onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length === 0} onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n        <div className=\"textformSummaryBox\">\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} and {text.split(/\\s+/).join(\"\").length} Characters.</p>\r\n            <p className=\"wordCount\">{0.008 * text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes to Read.</p>\r\n        </div>\r\n        <div className=\"preview\">\r\n            <h2>Preview your text here..</h2>\r\n            <hr/>\r\n            <p>{text.length > 0 ? text:\"Nothing to Show..\"}</p>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport \"./Footer.css\"\r\nexport default function Footer(props) {\r\n    return (\r\n        <div className=\"footerContainer\">\r\n            <footer>\r\n                <p>kuldeepSingh Â©2027.All right reserved</p>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport React,{useState} from 'react'\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Footer from './components/Footer';\n// import Alert from './components/Alert';\nfunction App() {\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  const [mode, setMode] = useState({\n    color:\"black\",\n    backgroundColor:\"white\"\n  })\n  const onchange = ()=>{\n    if(mode.color === \"black\"){\n      setMode({\n        color:\"white\",\n        backgroundColor:\"palevioletred\"\n      })\n      showAlert(\"Dark Mode has been anabled\",\"success\")\n      document.title = \"Textutils -Dark Mode\"\n    }\n    else{\n      setMode({\n        color:\"black\",\n        backgroundColor:\"white\"\n      })\n      document.title = \"Textutils -Light Mode\"\n      showAlert(\"Light Mode has been anabled\",\"success\")\n    }\n  }\n  return (\n    <>\n    <div style={mode}>\n    <Navbar onchange={onchange} title=\"MyTextutils\" mode={mode}/>\n    <Textform showAlert={showAlert} mode={mode} alert={alert} heading=\"Enter the Text to analyze..\"/>\n    <Footer mode={mode}/>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}